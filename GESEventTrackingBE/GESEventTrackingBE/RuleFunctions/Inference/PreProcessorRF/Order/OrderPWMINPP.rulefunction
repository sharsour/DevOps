/**
 * @description Pre-processor of Order Event received by PWM.
 */
void rulefunction RuleFunctions.Inference.PreProcessorRF.Order.OrderPWMINPP {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.Input.OrderEvent orderevent;
	}
	body {
		System.debugOut("In PWM IN Pre-processor");
		String gesAgentId=Engine.engineName();
		boolean isException=false;
		String ordNum=XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$orderevent/payload/xsd2:ORDER/xsd2:Lgcy_Ord_Num</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>orderevent</variable>\n    </variables>\n</xpath>");
		
		try
		{		
			//Check Order is present in Cache.
			System.debugOut("Acquired lock on "+ordNum);
			if(RuleFunctions.Inference.CommonRF.getConceptFromCache("ORDER"/*conceptName String */,ordNum/*conceptExtID String */,true/*getSysStateContainedConcept boolean */)!=null)
			{
				System.debugOut("Order is present in Cache ordNum = "+ordNum);
				return;
				
			}
			else
			{
				//Check if incoming Lgcy_Ord_Num is a duplicate Ord Num.
				String ordReNumExtId=System.getGlobalVariableAsString("EXTIDS/ORD_RE_NUM","ORD_RE_NUM");
				Concepts.ORDER_RE_NUM ordReNum= Instance.getByExtId(ordReNumExtId);
				String Old_Ord_Num=RuleFunctions.Inference.OrderFlowRF.getRenumberedOrder(ordNum/*OrdID String */,"OLD"/*Type String */,ordReNum/*ordReNum Concepts.ORDER_RE_NUM */);
				if(Old_Ord_Num!=null)
				{
					Cluster.DataGrid.Lock(Old_Ord_Num,-1,false);
					System.debugOut("Acquired lock on both Old_Ord_Num = "+Old_Ord_Num+" & New_Ord_Num = "+ordNum);
					if(RuleFunctions.Inference.CommonRF.getConceptFromCache("ORDER"/*conceptName String */,Old_Ord_Num/*conceptExtID String */,true/*getSysStateContainedConcept boolean */)!=null)
					{//If New_Ord_Num concept is present in the cache, aquire lock on New_Ord_Num & update the concept.
						System.debugOut("OldOrderNum is present in Cache OldordNum = "+Old_Ord_Num);
						return;
					}
					else
					{//If Old_Ord_Num concept is not present in the cache, aquire lock on OrdNum & create the concept with incoming Order Event data.
						System.debugOut("OldOrderNum is not present in Cache OldordNum = "+ordNum);
						return;
					}
				}
				else//Race Condition.
				{
					System.debugOut("OrderNum is not present in Cache ordNum = "+ordNum);
					return;
				}
			}
		}
		catch(Exception e)
		{
			System.debugOut("Exception caught in processing PWM IN Pre-processor rule function = "+e);
			Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/ExceptionEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" version=\"1.0\" exclude-result-prefixes=\"xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"ordNum\"/>\n    <xsl:param name=\"e\"/>\n    <xsl:param name=\"orderevent\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns:ExceptionRequest>\n                        <ns:Header>\n                            <ns:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns:ApplicationID>\n                            <ns:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns:ServiceName>\n                            <ns:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/OrderFlow\"/>\n                            </ns:ComponentName>\n                            <ns:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns:Hostname>\n                            <ns:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns:Timestamp>\n                            <ns:TransactionType>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/OrderFlow\"/>\n                            </ns:TransactionType>\n                            <ns:TransactionID>\n                                <xsl:value-of select=\"$ordNum\"/>\n                            </ns:TransactionID>\n                        </ns:Header>\n                        <ns:Category>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorCategory\"/>\n                        </ns:Category>\n                        <ns:Type>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorType\"/>\n                        </ns:Type>\n                        <ns:Severity>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorSeverity\"/>\n                        </ns:Severity>\n                        <ns:Code>\n                            <xsl:value-of select=\"$e/@errorType\"/>\n                        </ns:Code>\n                        <xsl:if test=\"$e/@message\">\n                            <ns:Message>\n                                <xsl:value-of select=\"$e/@message\"/>\n                            </ns:Message>\n                        </xsl:if>\n                        <ns:TransactionData>\n                            <xsl:value-of select=\"string($orderevent)\"/>\n                        </ns:TransactionData>\n                        <ns:DumpAnalysis>\n                            <xsl:value-of select=\"string($e)\"/>\n                        </ns:DumpAnalysis>\n                    </ns:ExceptionRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
			isException=true;
		}
			
		finally
		{
			if(isException)
			{
				Events.Replay.OrderReplayEvent orderReplayEvent=Event.createEvent("xslt://{{/Events/Replay/OrderReplayEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" version=\"1.0\" exclude-result-prefixes=\"xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"orderevent\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <xsl:copy-of select=\"$orderevent/payload/ns:ORDER\"/>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>");
				Event.sendEvent(orderReplayEvent);
				Event.consumeEvent(orderevent);
			}
			return;
		}
	}
}