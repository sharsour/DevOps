/**
 * @description This rule sends the Response to the ProgramSummary-Request sent by UI.
 * @author HYDPCM228839D
 */
rule Rules.RequestRep.ProgramSummaryReqRes {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		Events.RequestReply.ProgramSummaryRequest programSummaryRequestEvent;
	}
	when {
		
	}
	then {
		System.debugOut("In ProgramSummaryRequest rule");
		
		//Logging.
		boolean cleFlag=System.getGlobalVariableAsBoolean("CLEparams/CLE_Flag",true);
		String gesAgentId=Engine.engineName();
		if(cleFlag)
		{
			Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/LogEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns2=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" xmlns:ns3=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd\" xmlns:ns4=\"http://www.pepsico.com/schemas/practice/Schemas/Schema\" version=\"1.0\" exclude-result-prefixes=\"ns2 ns1 xsl ns4 ns ns3 xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"programSummaryRequestEvent\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns1:LogRequest>\n                        <ns1:Header>\n                            <ns1:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns1:ApplicationID>\n                            <ns1:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns1:ServiceName>\n                            <ns1:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/RequestReply\"/>\n                            </ns1:ComponentName>\n                            <ns1:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns1:Hostname>\n                            <ns1:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns1:Timestamp>\n                            <ns1:TransactionType>\n                                <xsl:value-of select=\"concat(&quot;PROGRAM SUMMARY&quot;,$globalVariables/CLEparams/CLE_ComponentNames/RequestReply)\"/>\n                            </ns1:TransactionType>\n                            <xsl:if test=\"$programSummaryRequestEvent/payload/ns4:ProgramSummaryRequest/ns4:ProgramSummarySearchRequest/ns4:TimeZone\">\n                                <ns1:BusinessID>\n                                    <xsl:value-of select=\"$programSummaryRequestEvent/payload/ns4:ProgramSummaryRequest/ns4:ProgramSummarySearchRequest/ns4:TimeZone\"/>\n                                </ns1:BusinessID>\n                            </xsl:if>\n                        </ns1:Header>\n                        <ns1:Messages>\n                            <ns1:Name>\n                                <xsl:value-of select=\"&quot;LOG_MSG&quot;\"/>\n                            </ns1:Name>\n                            <ns1:Value>\n                                <xsl:value-of select=\"concat(&quot;Started sending Program Summary response for Time Zone&quot;,$programSummaryRequestEvent/payload/ns4:ProgramSummaryRequest/ns4:ProgramSummarySearchRequest/ns4:TimeZone)\"/>\n                            </ns1:Value>\n                        </ns1:Messages>\n                        <ns1:Status>\n                            <xsl:value-of select=\"&quot;Start Log&quot;\"/>\n                        </ns1:Status>\n                        <ns1:TransactionBefore>\n                            <xsl:value-of select=\"string($programSummaryRequestEvent/payload)\"/>\n                        </ns1:TransactionBefore>\n                    </ns1:LogRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
		}
		
		try
		{
			String tZone=XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$programSummaryRequestEvent/payload/xsd2:ProgramSummaryRequest/xsd2:ProgramSummarySearchRequest/xsd2:TimeZone</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>programSummaryRequestEvent</variable>\n    </variables>\n</xpath>");
			String shipDate=XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$programSummaryRequestEvent/payload/xsd2:ProgramSummaryRequest/xsd2:ProgramSummarySearchRequest/xsd2:Ship_Date</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>programSummaryRequestEvent</variable>\n    </variables>\n</xpath>");
			String standardDate=XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>tib:format-dateTime(\"MM-dd-yyyy HH:mm:ss.SSS\", tib:create-dateTime(1970,1, 1,0, 0,0))</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n        <namespace URI=\"http://www.tibco.com/bw/xslt/custom-functions\" pfx=\"tib\"/>\n    </namespaces>\n    <variables/>\n</xpath>");
			
			Concepts.PLANT_TIMEZONE pTZone=Instance.getByExtIdByUri(System.getGlobalVariableAsString("EXTIDS/PLANT_TZONE","PLANT_TZONE"),"/Concepts/PLANT_TIMEZONE");
			Concepts.PLANT_SUMMARY plantSummary;
			Concepts.SAP_ORDER_LOCK ordLock;
			Concepts.TOKEN token;
			Concepts.OPTIMIZATION optimization;
			Concepts.Temporary.PROGRAM_SUMMARY program_Summary=Instance.createInstance("xslt://{{/Concepts/Temporary/PROGRAM_SUMMARY}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\" exclude-result-prefixes=\"xsl xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:template match=\"/\">\n        <createObject>\n            <object>\n                <xsl:attribute name=\"extId\">\n                    <xsl:value-of select=\"concat($globalVariables/EXTIDS/PLANT_SUMMARY,$globalVariables/EXTIDS/ORD_LOCK,$globalVariables/EXTIDS/ORDER_TOKEN)\"/>\n                </xsl:attribute>\n            </object>\n        </createObject>\n    </xsl:template>\n</xsl:stylesheet>");
		
			String [] plant_Nums=RuleFunctions.Inference.CommonRF.getPlantNumsOfTZone(tZone/*tZone String */);
			String eval=System.getGlobalVariableAsString("SLA/STATUS/INITIAL","EVAL");
			String pass=System.getGlobalVariableAsString("SLA/STATUS/SUCCESS","PASS");
			String late=System.getGlobalVariableAsString("SLA/STATUS/FIRSTFAIL","LATE");
			String fail=System.getGlobalVariableAsString("SLA/STATUS/SECONDFAIL","FAIL");
			String empty="";
			
			for(int index=0;index<plant_Nums@length;index++)
			{
				System.debugOut("Accumulating the data of plantNum = "+plant_Nums[index]);
				plantSummary=null; ordLock=null; token=null; optimization=null;
				String plantSummaryExtId=System.getGlobalVariableAsString("EXTIDS/PLANT_SUMMARY","PLANT_SUMMARY")+plant_Nums[index]+shipDate;
				plantSummary=Instance.getByExtIdByUri(plantSummaryExtId,"/Concepts/PLANT_SUMMARY");
				
				//Retrieve Plant Name by using Plant Number from Order Event.
				String plantName=empty;
				if(plant_Nums[index]!=null)
				{
					plantName=RuleFunctions.Inference.CommonRF.getPlantName(plant_Nums[index]/*plantNum String */,pTZone/*plantTZ Concepts.PLANT_TIMEZONE */);
				}
				
				
				//Accumulate data from plantSummary concept
				Instance.PropertyArray.appendString(program_Summary.PLANT_NUM,plant_Nums[index],System.currentTimeMillis());
				Instance.PropertyArray.appendString(program_Summary.PLANT_NAME,plantName,System.currentTimeMillis());
				if(plantSummary!=null)
				{
					Instance.PropertyArray.appendInt(program_Summary.ORD_CNT,plantSummary.SAP_OUT_ORD_CNT,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.ORD_TRIPPED_CNT,plantSummary.ORD_TRIPPED_CNT,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.ALL_TRIPS_CNT,plantSummary.ETM_TRIP_CNT,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.SITE_TRIP_CNT,plantSummary.PWM_TRIP_CNT,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.TOTAL_CASES,plantSummary.TOTAL_CASES_CNT,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.ALLTRIPSATPWM,plantSummary.ALL_TRIPS_AT_SITE_CHECK,System.currentTimeMillis());
					if(plantSummary.ALL_TRIPS_AT_SITE_CHECK!=eval)
					{
						Instance.PropertyArray.appendString(program_Summary.ALLTRIPSATPWM_TIME,plantSummary.ALL_TRIPS_AT_SITE_TIME,System.currentTimeMillis());
					}
					else
					{
						Instance.PropertyArray.appendString(program_Summary.ALLTRIPSATPWM_TIME,standardDate,System.currentTimeMillis());
					}
				}
				else
				{
					Instance.PropertyArray.appendInt(program_Summary.ORD_CNT,0,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.ORD_TRIPPED_CNT,0,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.ALL_TRIPS_CNT,0,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.SITE_TRIP_CNT,0,System.currentTimeMillis());
					Instance.PropertyArray.appendInt(program_Summary.TOTAL_CASES,0,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.ALLTRIPSATPWM,eval,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.ALLTRIPSATPWM_TIME,standardDate,System.currentTimeMillis());
				}
			
				//Accumulate data from ordLock concept
				String ordLockExtId=System.getGlobalVariableAsString("EXTIDS/ORD_LOCK","ORD_LOCK")+plant_Nums[index]+shipDate;
				ordLock=Instance.getByExtIdByUri(ordLockExtId,"/Concepts/SAP_ORDER_LOCK");
				if(ordLock!=null)
				{
					Instance.PropertyArray.appendString(program_Summary.LOCK_STATUS,ordLock.STATUS,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.LOCK_TIME,ordLock.LOCKTIMESTAMP,System.currentTimeMillis());
				}
				else
				{
					Instance.PropertyArray.appendString(program_Summary.LOCK_STATUS,eval,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.LOCK_TIME,standardDate,System.currentTimeMillis());
				}
				
				//Accumulate data from token concept
				String tokenExtId=System.getGlobalVariableAsString("EXTIDS/ORDER_TOKEN","ORDER_TOKEN")+plant_Nums[index]+shipDate;
				token=Instance.getByExtIdByUri(tokenExtId,"/Concepts/TOKEN");
				if(token!=null)
				{
					Instance.PropertyArray.appendString(program_Summary.TOKEN_STATUS,token.STATUS,System.currentTimeMillis());
					String tokenTimeStamp=XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>if( string-length($token/TOKEN_CREATIONTIME)!=0)\nthen $token/TOKEN_CREATIONTIME\nelse\n$token/TOKEN_GOA_RECIEVETIME</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n        <namespace URI=\"http://www.tibco.com/bw/xslt/custom-functions\" pfx=\"tib\"/>\n    </namespaces>\n    <variables>\n        <variable>token</variable>\n        <variable>token</variable>\n        <variable>token</variable>\n    </variables>\n</xpath>");
					Instance.PropertyArray.appendString(program_Summary.TOKEN_TIME,tokenTimeStamp,System.currentTimeMillis());
				}
				else
				{
					Instance.PropertyArray.appendString(program_Summary.TOKEN_STATUS,eval,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.TOKEN_TIME,standardDate,System.currentTimeMillis());
				}
				
				//Accumulate data from optimization concept
				String optimizationExtId=System.getGlobalVariableAsString("EXTIDS/OPTIMIZATION","OPTIMIZATION")+plant_Nums[index]+shipDate;
				optimization=Instance.getByExtIdByUri(optimizationExtId,"/Concepts/OPTIMIZATION");
				if(optimization!=null)
				{
					Instance.PropertyArray.appendString(program_Summary.OPTIMIZE_STATUS,optimization.STATUS,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.OPTIMIZE_TIME,optimization.OPTIMIZATION_TIMESTAMP,System.currentTimeMillis());
				}
				else
				{
					Instance.PropertyArray.appendString(program_Summary.OPTIMIZE_STATUS,eval,System.currentTimeMillis());
					Instance.PropertyArray.appendString(program_Summary.OPTIMIZE_TIME,standardDate,System.currentTimeMillis());
				}
				
			}
			
			Events.RequestReply.ProgramSummaryResponse programSummaryReplyEvent=Event.createEvent("xslt://{{/Events/RequestReply/ProgramSummaryResponse}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema\" version=\"1.0\" exclude-result-prefixes=\"xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"program_Summary\"/>\n    <xsl:param name=\"var\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns:ProgramSummaryResponse>\n                        <xsl:for-each select=\"$program_Summary/PLANT_NUM\">\n                            <xsl:variable name=\"var\" select=\"position()\"/>\n                            <ns:ProgramSummarySearchResponse>\n                                <ns:Plant_Num>\n                                    <xsl:value-of select=\".\"/>\n                                </ns:Plant_Num>\n                                <xsl:if test=\"../PLANT_NAME[$var]\">\n                                    <ns:Plant_Name>\n                                        <xsl:value-of select=\"../PLANT_NAME[$var]\"/>\n                                    </ns:Plant_Name>\n                                </xsl:if>\n                                <xsl:if test=\"../ORD_CNT[$var]\">\n                                    <ns:Ord_Cnt>\n                                        <xsl:value-of select=\"../ORD_CNT[$var]\"/>\n                                    </ns:Ord_Cnt>\n                                </xsl:if>\n                                <xsl:if test=\"../LOCK_STATUS[$var]\">\n                                    <ns:Lock_Status>\n                                        <xsl:value-of select=\"../LOCK_STATUS[$var]\"/>\n                                    </ns:Lock_Status>\n                                </xsl:if>\n                                <xsl:if test=\"../LOCK_TIME[$var]\">\n                                    <ns:Lock_Time>\n                                        <xsl:value-of select=\"../LOCK_TIME[$var]\"/>\n                                    </ns:Lock_Time>\n                                </xsl:if>\n                                <xsl:if test=\"../TOKEN_STATUS[$var]\">\n                                    <ns:Token_Status>\n                                        <xsl:value-of select=\"../TOKEN_STATUS[$var]\"/>\n                                    </ns:Token_Status>\n                                </xsl:if>\n                                <xsl:if test=\"../TOKEN_TIME[$var]\">\n                                    <ns:Token_Time>\n                                        <xsl:value-of select=\"../TOKEN_TIME[$var]\"/>\n                                    </ns:Token_Time>\n                                </xsl:if>\n                                <xsl:if test=\"../OPTIMIZE_STATUS[$var]\">\n                                    <ns:Optimize_Status>\n                                        <xsl:value-of select=\"../OPTIMIZE_STATUS[$var]\"/>\n                                    </ns:Optimize_Status>\n                                </xsl:if>\n                                <xsl:if test=\"../OPTIMIZE_TIME[$var]\">\n                                    <ns:Optimize_Time>\n                                        <xsl:value-of select=\"../OPTIMIZE_TIME[$var]\"/>\n                                    </ns:Optimize_Time>\n                                </xsl:if>\n                                <xsl:if test=\"../ALLTRIPSATPWM[$var]\">\n                                    <ns:AllTripsAtSite>\n                                        <xsl:value-of select=\"../ALLTRIPSATPWM[$var]\"/>\n                                    </ns:AllTripsAtSite>\n                                </xsl:if>\n                                <xsl:if test=\"../ALLTRIPSATPWM_TIME[$var]\">\n                                    <ns:AllTripsAtSite_Time>\n                                        <xsl:value-of select=\"../ALLTRIPSATPWM_TIME[$var]\"/>\n                                    </ns:AllTripsAtSite_Time>\n                                </xsl:if>\n                                <xsl:if test=\"../ALL_TRIPS_CNT[$var]\">\n                                    <ns:All_Trip_Cnt>\n                                        <xsl:value-of select=\"../ALL_TRIPS_CNT[$var]\"/>\n                                    </ns:All_Trip_Cnt>\n                                </xsl:if>\n                                <xsl:if test=\"../SITE_TRIP_CNT[$var]\">\n                                    <ns:Site_Trip_Cnt>\n                                        <xsl:value-of select=\"../SITE_TRIP_CNT[$var]\"/>\n                                    </ns:Site_Trip_Cnt>\n                                </xsl:if>\n                                <xsl:if test=\"../ORD_TRIPPED_CNT[$var]\">\n                                    <ns:ReconciledOrders_Cnt>\n                                        <xsl:value-of select=\"../ORD_TRIPPED_CNT[$var]\"/>\n                                    </ns:ReconciledOrders_Cnt>\n                                </xsl:if>\n                                <xsl:if test=\"../TOTAL_CASES[$var]\">\n                                    <ns:TotalCases_Cnt>\n                                        <xsl:value-of select=\"../TOTAL_CASES[$var]\"/>\n                                    </ns:TotalCases_Cnt>\n                                </xsl:if>\n                            </ns:ProgramSummarySearchResponse>\n                        </xsl:for-each>\n                    </ns:ProgramSummaryResponse>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>");
			Event.replyEvent(programSummaryRequestEvent,programSummaryReplyEvent);
			
			Instance.deleteInstance(program_Summary);	
		}
		catch(Exception e)
		{
			System.debugOut("Exception caught in processing ProgramSummaryRequestReply rule = "+e);
			Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/ExceptionEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns1=\"http://www.pepsico.com/schemas/practice/Schemas/Schema\" version=\"1.0\" exclude-result-prefixes=\"ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"programSummaryRequestEvent\"/>\n    <xsl:param name=\"e\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns:ExceptionRequest>\n                        <ns:Header>\n                            <ns:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns:ApplicationID>\n                            <ns:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns:ServiceName>\n                            <ns:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns:Hostname>\n                            <ns:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns:Timestamp>\n                            <ns:TransactionType>\n                                <xsl:value-of select=\"&quot;PROGRAM SUMMARY&quot;\"/>\n                            </ns:TransactionType>\n                            <xsl:if test=\"$programSummaryRequestEvent/payload/ns1:ProgramSummaryRequest/ns1:ProgramSummarySearchRequest/ns1:TimeZone\">\n                                <ns:BusinessID>\n                                    <xsl:value-of select=\"$programSummaryRequestEvent/payload/ns1:ProgramSummaryRequest/ns1:ProgramSummarySearchRequest/ns1:TimeZone\"/>\n                                </ns:BusinessID>\n                            </xsl:if>\n                        </ns:Header>\n                        <ns:Category>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorCategory\"/>\n                        </ns:Category>\n                        <ns:Type>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorType\"/>\n                        </ns:Type>\n                        <ns:Severity>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorSeverity\"/>\n                        </ns:Severity>\n                        <ns:Code>\n                            <xsl:value-of select=\"$e/@errorType\"/>\n                        </ns:Code>\n                        <xsl:if test=\"$e/@message\">\n                            <ns:Message>\n                                <xsl:value-of select=\"$e/@message\"/>\n                            </ns:Message>\n                        </xsl:if>\n                        <ns:TransactionData>\n                            <xsl:value-of select=\"string($programSummaryRequestEvent)\"/>\n                        </ns:TransactionData>\n                        <ns:DumpAnalysis>\n                            <xsl:value-of select=\"string($e)\"/>\n                        </ns:DumpAnalysis>\n                    </ns:ExceptionRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
		}
			
		finally
		{
			//End Log.
			if(cleFlag)
			{
				Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/LogEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns2=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" xmlns:ns3=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd\" xmlns:ns4=\"http://www.pepsico.com/schemas/practice/Schemas/Schema\" version=\"1.0\" exclude-result-prefixes=\"ns2 ns1 xsl ns4 ns ns3 xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"programSummaryRequestEvent\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns1:LogRequest>\n                        <ns1:Header>\n                            <ns1:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns1:ApplicationID>\n                            <ns1:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns1:ServiceName>\n                            <ns1:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/RequestReply\"/>\n                            </ns1:ComponentName>\n                            <ns1:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns1:Hostname>\n                            <ns1:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns1:Timestamp>\n                            <ns1:TransactionType>\n                                <xsl:value-of select=\"concat(&quot;PROGRAM SUMMARY&quot;,$globalVariables/CLEparams/CLE_ComponentNames/RequestReply)\"/>\n                            </ns1:TransactionType>\n                            <xsl:if test=\"$programSummaryRequestEvent/payload/ns4:ProgramSummaryRequest/ns4:ProgramSummarySearchRequest/ns4:TimeZone\">\n                                <ns1:BusinessID>\n                                    <xsl:value-of select=\"$programSummaryRequestEvent/payload/ns4:ProgramSummaryRequest/ns4:ProgramSummarySearchRequest/ns4:TimeZone\"/>\n                                </ns1:BusinessID>\n                            </xsl:if>\n                        </ns1:Header>\n                        <ns1:Messages>\n                            <ns1:Name>\n                                <xsl:value-of select=\"&quot;LOG_MSG&quot;\"/>\n                            </ns1:Name>\n                            <ns1:Value>\n                                <xsl:value-of select=\"concat(&quot;Started sending Program Summary response for Time Zone&quot;,$programSummaryRequestEvent/payload/ns4:ProgramSummaryRequest/ns4:ProgramSummarySearchRequest/ns4:TimeZone)\"/>\n                            </ns1:Value>\n                        </ns1:Messages>\n                        <ns1:Status>\n                            <xsl:value-of select=\"&quot;End Log&quot;\"/>\n                        </ns1:Status>\n                        <ns1:TransactionBefore>\n                            <xsl:value-of select=\"string($programSummaryRequestEvent)\"/>\n                        </ns1:TransactionBefore>\n                    </ns1:LogRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
			}
			
			Event.consumeEvent(programSummaryRequestEvent);
		}
	}
}