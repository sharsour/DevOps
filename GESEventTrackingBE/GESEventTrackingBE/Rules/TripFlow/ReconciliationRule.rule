/**
 * @description This rule performs Reconciliation & Updates the Trip & Order concepts with the data of incoming ETM-OUT Trip Event.
 * @author HYDPCM228839D
 */
rule Rules.TripFlow.ReconciliationRule {
	attribute {
		priority = 2;
		forwardChain = true;
	}
	declare {
		Events.Internal.ReconcileResponse recoResponse;
		Concepts.TRIP trip;
	}
	when {
		trip.TRIPID==XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$recoResponse/payload/xsd2:ReconciliationResponse/xsd2:TripID</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>recoResponse</variable>\n    </variables>\n</xpath>");
	}
	then {
		System.debugOut("In Reconciliation rule");
		//Logging.
		boolean cleFlag=System.getGlobalVariableAsBoolean("CLEparams/CLE_Flag",true);
		String gesAgentId=Engine.engineName();
		if(cleFlag)
		{
			Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/LogEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns2=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" version=\"1.0\" exclude-result-prefixes=\"ns2 ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"recoResponse\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns1:LogRequest>\n                        <ns1:Header>\n                            <ns1:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns1:ApplicationID>\n                            <ns1:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns1:ServiceName>\n                            <ns1:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/TripFlow\"/>\n                            </ns1:ComponentName>\n                            <ns1:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns1:Hostname>\n                            <ns1:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns1:Timestamp>\n                            <ns1:TransactionType>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_TransactionType/TripFlow\"/>\n                            </ns1:TransactionType>\n                            <xsl:if test=\"$recoResponse/payload/ns2:ReconciliationResponse/ns2:Plant_Num\">\n                                <ns1:BusinessID>\n                                    <xsl:value-of select=\"$recoResponse/payload/ns2:ReconciliationResponse/ns2:Plant_Num\"/>\n                                </ns1:BusinessID>\n                            </xsl:if>\n                        </ns1:Header>\n                        <ns1:Messages>\n                            <ns1:Name>\n                                <xsl:value-of select=\"&quot;LOG_MSG&quot;\"/>\n                            </ns1:Name>\n                            <ns1:Value>\n                                <xsl:value-of select=\"concat(&quot;Started performing Reconciliation for Trip  =  &quot;,$recoResponse/payload/ns2:ReconciliationResponse/ns2:TripID)\"/>\n                            </ns1:Value>\n                        </ns1:Messages>\n                        <ns1:Status>\n                            <xsl:value-of select=\"&quot;Start Log&quot;\"/>\n                        </ns1:Status>\n                        <ns1:TransactionBefore>\n                            <xsl:value-of select=\"string($recoResponse)\"/>\n                        </ns1:TransactionBefore>\n                    </ns1:LogRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
		}
		
		try
		{
			int noOfSAPOrders=XPath.evalAsInt("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>count($recoResponse/payload/xsd2:ReconciliationResponse/xsd2:SAPOrder/xsd2:SAPOrderNumber)</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>recoResponse</variable>\n    </variables>\n</xpath>");
			int noOfLgcyOrders=XPath.evalAsInt("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>count($recoResponse/payload/xsd2:ReconciliationResponse/xsd2:LgcyOrder/xsd2:LgcyOrderNumber)</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>recoResponse</variable>\n    </variables>\n</xpath>");
			
				String lgcy_Ord_Num;
				int total_cases=0;
				int noOfReconciledOrders=0;
				String shipDate;
				String e2eSLA=System.getGlobalVariableAsString("SLA/STATUS/INITIAL","EVAL");
				Concepts.ORDERS order;
				
					for(int index=1;index<=noOfLgcyOrders;index++)
					{
						lgcy_Ord_Num=XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$recoResponse/payload/xsd2:ReconciliationResponse/xsd2:LgcyOrder/xsd2:LgcyOrderNumber[number($index)]</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>recoResponse</variable>\n        <variable>index</variable>\n    </variables>\n</xpath>");
						if(lgcy_Ord_Num!="0")
						{
							Cluster.DataGrid.Lock(lgcy_Ord_Num,-1,false);
							order=RuleFunctions.Inference.CommonRF.getConceptFromCache("ORDER"/*conceptName String */,lgcy_Ord_Num/*conceptExtID String */,false/*getSysStateContainedConcept boolean */);
							
							order.TRIPID=trip.TRIPID;
							order.TRIP_STATUS=true;
							//System.debugOut("Reconciled  order = "+order.LGCY_ORD_NUM);
							noOfReconciledOrders++;
							total_cases=total_cases+order.CASES;
							if(shipDate==null)
							{
								shipDate=order.SHIP_DATE;
							}
							
						}
					}
					
					trip.CASES=total_cases;
					trip.SHIP_DATE=shipDate;
					if(noOfReconciledOrders!=0)
					{
						trip.RECONCILIATION_DONE=true;
						trip.IS_GES=true;
					}
					
					if(trip.E2ESLA==System.getGlobalVariableAsString("SLA/STATUS/INITIAL","EVAL"))
					{//Trigger Timer events to check E2ESLA of Trip.
						
						String schedulerName=System.getGlobalVariableAsString("Scheduler/SchedulerName","GESScheduler");
						String subWorkKey=trip.TRIPID;
						
						//Timer Event to check if E2ESLA Status is LATE.
						String workKeyLate=subWorkKey+"LATE";
						Events.Timer.SLATimerEvent e2eSlaLateTimerEvent=Event.createEvent("xslt://{{/Events/Timer/SLATimerEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" version=\"1.0\" exclude-result-prefixes=\"ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"workKeyLate\"/>\n    <xsl:param name=\"trip\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <xsl:attribute name=\"extId\">\n                    <xsl:value-of select=\"$workKeyLate\"/>\n                </xsl:attribute>\n                <xsl:if test=\"$trip/LAST_KNOWN_SYSTEM\">\n                    <System>\n                        <xsl:value-of select=\"$trip/LAST_KNOWN_SYSTEM\"/>\n                    </System>\n                </xsl:if>\n                <xsl:if test=\"$trip/PLANT_NUM\">\n                    <Plant_Num>\n                        <xsl:value-of select=\"$trip/PLANT_NUM\"/>\n                    </Plant_Num>\n                </xsl:if>\n                <Interval>\n                    <xsl:value-of select=\"$globalVariables/SLA/INTERVAL/TRIP_E2ESLA_LATE\"/>\n                </Interval>\n                <xsl:if test=\"$trip/TRIPID\">\n                    <TripID>\n                        <xsl:value-of select=\"$trip/TRIPID\"/>\n                    </TripID>\n                </xsl:if>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>");
						Long lateInterval=System.currentTimeMillis() + System.getGlobalVariableAsLong("SLA/INTERVAL/TRIP_E2ESLA_LATE",25000)-5000;
						Cluster.scheduleEvent(schedulerName,workKeyLate,e2eSlaLateTimerEvent,lateInterval);
						
						//Timer Event to check if E2ESLA Status is FAIL.
						String workKeyFail=subWorkKey+"FAIL";
						Events.Timer.SLATimerEvent e2eSlaFailTimerEvent=Event.createEvent("xslt://{{/Events/Timer/SLATimerEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" version=\"1.0\" exclude-result-prefixes=\"ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"workKeyFail\"/>\n    <xsl:param name=\"trip\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <xsl:attribute name=\"extId\">\n                    <xsl:value-of select=\"$workKeyFail\"/>\n                </xsl:attribute>\n                <xsl:if test=\"$trip/LAST_KNOWN_SYSTEM\">\n                    <System>\n                        <xsl:value-of select=\"$trip/LAST_KNOWN_SYSTEM\"/>\n                    </System>\n                </xsl:if>\n                <xsl:if test=\"$trip/PLANT_NUM\">\n                    <Plant_Num>\n                        <xsl:value-of select=\"$trip/PLANT_NUM\"/>\n                    </Plant_Num>\n                </xsl:if>\n                <Interval>\n                    <xsl:value-of select=\"$globalVariables/SLA/INTERVAL/TRIP_E2ESLA_FAIL\"/>\n                </Interval>\n                <xsl:if test=\"$trip/TRIPID\">\n                    <TripID>\n                        <xsl:value-of select=\"$trip/TRIPID\"/>\n                    </TripID>\n                </xsl:if>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>");
						Long failInterval=System.currentTimeMillis() + System.getGlobalVariableAsLong("SLA/INTERVAL/TRIP_E2ESLA_FAIL",30000)-5000;//500 is sleep time set in Query.
						Cluster.scheduleEvent(schedulerName,workKeyFail,e2eSlaFailTimerEvent,failInterval);			
					}
					
					if(shipDate!=null)
					{
						//PlantSummary Event Triggered for ETMTripOut.
						Events.Internal.PlantSummaryEvent plantSummaryEvent=Event.createEvent("xslt://{{/Events/Internal/PlantSummaryEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:tib=\"http://www.tibco.com/bw/xslt/custom-functions\" version=\"1.0\" exclude-result-prefixes=\"xsl ns xsd tib\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"trip\"/>\n    <xsl:param name=\"noOfReconciledOrders\"/>\n    <xsl:param name=\"noOfSAPOrders\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <xsl:if test=\"$trip/PLANT_NUM\">\n                    <PLANT_NUM>\n                        <xsl:value-of select=\"$trip/PLANT_NUM\"/>\n                    </PLANT_NUM>\n                </xsl:if>\n                <xsl:if test=\"$trip/PLANT_NAME\">\n                    <PLANT_NAME>\n                        <xsl:value-of select=\"$trip/PLANT_NAME\"/>\n                    </PLANT_NAME>\n                </xsl:if>\n                <xsl:if test=\"$trip/SHIP_DATE\">\n                    <SHIP_DATE>\n                        <xsl:value-of select=\"$trip/SHIP_DATE\"/>\n                    </SHIP_DATE>\n                </xsl:if>\n                <ORD_TRIPPED_CNT>\n                    <xsl:value-of select=\"if($noOfReconciledOrders>$noOfSAPOrders) then $noOfSAPOrders else $noOfReconciledOrders\"/>\n                </ORD_TRIPPED_CNT>\n                <ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </ORD_CNT>\n                <DELAYED_ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </DELAYED_ORD_CNT>\n                <MANUAL_ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </MANUAL_ORD_CNT>\n                <WATS_ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </WATS_ORD_CNT>\n                <SAP_ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </SAP_ORD_CNT>\n                <PWM_ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </PWM_ORD_CNT>\n                <GOA_ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </GOA_ORD_CNT>\n                <TOTAL_CASES_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </TOTAL_CASES_CNT>\n                <TM_TRIP_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </TM_TRIP_CNT>\n                <ETM_TRIP_CNT>\n                    <xsl:value-of select=\"1\"/>\n                </ETM_TRIP_CNT>\n                <SAP_TRIP_CNT>\n                    <xsl:value-of select=\"1\"/>\n                </SAP_TRIP_CNT>\n                <PWM_TRIP_CNT>\n                    <xsl:value-of select=\"if(string-length($trip/SYSSTATE[$trip/SYSSTATE/SYSTEM=$globalVariables/OrderSystems/ActualSystems/PWM]/IN_DATETIME)!=0)&#xA;then 1&#xA;else 0\"/>\n                </PWM_TRIP_CNT>\n                <E2ESLA_MISS_ORD_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </E2ESLA_MISS_ORD_CNT>\n                <E2ESLA_MISS_TRIP_CNT>\n                    <xsl:value-of select=\"if($trip/E2ESLA=$globalVariables/SLA/STATUS/SECONDFAIL) then 1 else 0\"/>\n                </E2ESLA_MISS_TRIP_CNT>\n                <ORD_WATS_SLA_MISS_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </ORD_WATS_SLA_MISS_CNT>\n                <ORD_SAP_SLA_MISS_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </ORD_SAP_SLA_MISS_CNT>\n                <ORD_PWM_SLA_MISS_CNT>\n                    <xsl:value-of select=\"0\"/>\n                </ORD_PWM_SLA_MISS_CNT>\n                <TRIP_TIME>\n                    <xsl:value-of select=\"if(string-length($trip/SYSSTATE[$trip/SYSSTATE/SYSTEM=$globalVariables/OrderSystems/ActualSystems/PWM]/IN_DATETIME)!=0)&#xA;then $trip/SYSSTATE[$trip/SYSSTATE/SYSTEM=$globalVariables/OrderSystems/ActualSystems/PWM]/IN_DATETIME&#xA;else tib:format-dateTime(&quot;MM-dd-yyyy HH:mm:ss.SSS&quot;,current-dateTime())\"/>\n                </TRIP_TIME>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>");
						Event.sendEvent(plantSummaryEvent);
					}
			
			
			
		}
		catch(Exception e)
		{
			String message = "Exception caught in processing Reconciliation rule  ";
			System.debugOut(message+e);
			Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/ExceptionEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns1=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" version=\"1.0\" exclude-result-prefixes=\"ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"message\"/>\n    <xsl:param name=\"recoResponse\"/>\n    <xsl:param name=\"e\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns:ExceptionRequest>\n                        <ns:Header>\n                            <ns:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns:ApplicationID>\n                            <ns:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns:ServiceName>\n                            <ns:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/TripFlow\"/>\n                            </ns:ComponentName>\n                            <ns:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns:Hostname>\n                            <ns:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns:Timestamp>\n                            <ns:TransactionType>\n                                <xsl:value-of select=\"$message\"/>\n                            </ns:TransactionType>\n                            <xsl:if test=\"$recoResponse/payload/ns1:ReconciliationResponse/ns1:Plant_Num\">\n                                <ns:BusinessID>\n                                    <xsl:value-of select=\"$recoResponse/payload/ns1:ReconciliationResponse/ns1:Plant_Num\"/>\n                                </ns:BusinessID>\n                            </xsl:if>\n                        </ns:Header>\n                        <ns:Category>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorCategory\"/>\n                        </ns:Category>\n                        <ns:Type>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorType\"/>\n                        </ns:Type>\n                        <ns:Severity>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorSeverity\"/>\n                        </ns:Severity>\n                        <ns:Code>\n                            <xsl:value-of select=\"$e/@errorType\"/>\n                        </ns:Code>\n                        <xsl:if test=\"$e/@message\">\n                            <ns:Message>\n                                <xsl:value-of select=\"$e/@message\"/>\n                            </ns:Message>\n                        </xsl:if>\n                        <ns:TransactionData>\n                            <xsl:value-of select=\"string($recoResponse)\"/>\n                        </ns:TransactionData>\n                        <ns:DumpAnalysis>\n                            <xsl:value-of select=\"string($e)\"/>\n                        </ns:DumpAnalysis>\n                    </ns:ExceptionRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
		}
			
		finally
		{
			//End Log.
			if(cleFlag)
			{
				Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/LogEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns2=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd4\" version=\"1.0\" exclude-result-prefixes=\"ns2 ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"recoResponse\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns1:LogRequest>\n                        <ns1:Header>\n                            <ns1:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns1:ApplicationID>\n                            <ns1:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns1:ServiceName>\n                            <ns1:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/TripFlow\"/>\n                            </ns1:ComponentName>\n                            <ns1:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns1:Hostname>\n                            <ns1:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns1:Timestamp>\n                            <ns1:TransactionType>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_TransactionType/TripFlow\"/>\n                            </ns1:TransactionType>\n                            <xsl:if test=\"$recoResponse/payload/ns2:ReconciliationResponse/ns2:Plant_Num\">\n                                <ns1:BusinessID>\n                                    <xsl:value-of select=\"$recoResponse/payload/ns2:ReconciliationResponse/ns2:Plant_Num\"/>\n                                </ns1:BusinessID>\n                            </xsl:if>\n                        </ns1:Header>\n                        <ns1:Messages>\n                            <ns1:Name>\n                                <xsl:value-of select=\"&quot;LOG_MSG&quot;\"/>\n                            </ns1:Name>\n                            <ns1:Value>\n                                <xsl:value-of select=\"concat(&quot;Completed performing Reconciliation for Trip  =  &quot;,$recoResponse/payload/ns2:ReconciliationResponse/ns2:TripID)\"/>\n                            </ns1:Value>\n                        </ns1:Messages>\n                        <ns1:Status>\n                            <xsl:value-of select=\"&quot;End Log&quot;\"/>\n                        </ns1:Status>\n                        <ns1:TransactionBefore>\n                            <xsl:value-of select=\"string($recoResponse)\"/>\n                        </ns1:TransactionBefore>\n                    </ns1:LogRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
			}
			
			//Consuming/Deleting the Trip Event.
			Event.consumeEvent(recoResponse);
		}
	}
}