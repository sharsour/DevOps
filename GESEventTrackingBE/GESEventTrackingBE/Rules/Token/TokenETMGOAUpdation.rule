/**
 * @description This rule updates the Token concept with the data of incoming ETM-GOA IN Token Event.
 * @author HYDPCM228839D
 */
rule Rules.Token.TokenETMGOAUpdation {
	attribute {
		priority = 1;
		forwardChain = true;
	}
	declare {
		Events.Input.TokenEvent tokenEvent;
		Concepts.TOKEN token;
	}
	when {
		System.getGlobalVariableAsString("OrderSystems/InputSystems/PWMOUT-GOAIN","ETMGOAIN")==XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$tokenEvent/payload/xsd2:OrdToken/xsd2:System</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>tokenEvent</variable>\n    </variables>\n</xpath>")
																&&
		token@extId==System.getGlobalVariableAsString("EXTIDS/ORDER_TOKEN","ORDER_TOKEN")+XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$tokenEvent/payload/xsd2:OrdToken/xsd2:Plant_Num</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>tokenEvent</variable>\n    </variables>\n</xpath>")+XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$tokenEvent/payload/xsd2:OrdToken/xsd2:Ship_Date</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>tokenEvent</variable>\n    </variables>\n</xpath>");
	}
	then {
		System.debugOut("In Token Updation rule at ETMGOA-IN");
		
		//Logging.
		boolean cleFlag=System.getGlobalVariableAsBoolean("CLEparams/CLE_Entity_Flag",true);
		String gesAgentId=Engine.engineName();
		if(cleFlag)
		{
			Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/LogEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns2=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" version=\"1.0\" exclude-result-prefixes=\"ns2 ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"tokenEvent\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns1:LogRequest>\n                        <ns1:Header>\n                            <ns1:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns1:ApplicationID>\n                            <ns1:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns1:ServiceName>\n                            <ns1:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns1:Hostname>\n                            <ns1:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns1:Timestamp>\n                            <ns1:TransactionType>\n                                <xsl:value-of select=\"$globalVariables/EXTIDS/ORDER_TOKEN\"/>\n                            </ns1:TransactionType>\n                            <xsl:if test=\"$tokenEvent/payload/ns2:OrdToken/ns2:Plant_Num\">\n                                <ns1:BusinessID>\n                                    <xsl:value-of select=\"$tokenEvent/payload/ns2:OrdToken/ns2:Plant_Num\"/>\n                                </ns1:BusinessID>\n                            </xsl:if>\n                        </ns1:Header>\n                        <ns1:Messages>\n                            <ns1:Name>\n                                <xsl:value-of select=\"&quot;LOG_MSG&quot;\"/>\n                            </ns1:Name>\n                            <ns1:Value>\n                                <xsl:value-of select=\"concat(&quot;Token updation started for Plant_Num= &quot;,$tokenEvent/payload/ns2:OrdToken/ns2:Plant_Num,&quot; on Ship_Date=&quot;,$tokenEvent/payload/ns2:OrdToken/ns2:Ship_Date)\"/>\n                            </ns1:Value>\n                        </ns1:Messages>\n                        <ns1:Status>\n                            <xsl:value-of select=\"&quot;Start Log&quot;\"/>\n                        </ns1:Status>\n                        <ns1:TransactionBefore>\n                            <xsl:value-of select=\"string($tokenEvent/payload)\"/>\n                        </ns1:TransactionBefore>\n                    </ns1:LogRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
		}
		
		try
		{
			String fail=System.getGlobalVariableAsString("SLA/STATUS/SECONDFAIL","FAIL");
			String late=System.getGlobalVariableAsString("SLA/STATUS/FIRSTFAIL","LATE");
				
			
			if(token.TOKEN_GOA_RECIEVETIME!=null)
			{
				System.debugOut("Token already received for PlantNum="+token.PLANT_NUM+" on ShipDate="+token.SHIPDATE);
				Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/ExceptionEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns1=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" version=\"1.0\" exclude-result-prefixes=\"ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"tokenEvent\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns:ExceptionRequest>\n                        <ns:Header>\n                            <ns:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns:ApplicationID>\n                            <ns:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns:ServiceName>\n                            <ns:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns:Hostname>\n                            <ns:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns:Timestamp>\n                            <ns:TransactionType>\n                                <xsl:value-of select=\"$globalVariables/EXTIDS/ORDER_TOKEN\"/>\n                            </ns:TransactionType>\n                            <xsl:if test=\"$tokenEvent/payload/ns1:OrdToken/ns1:Plant_Num\">\n                                <ns:BusinessID>\n                                    <xsl:value-of select=\"$tokenEvent/payload/ns1:OrdToken/ns1:Plant_Num\"/>\n                                </ns:BusinessID>\n                            </xsl:if>\n                        </ns:Header>\n                        <ns:Category>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorCategory\"/>\n                        </ns:Category>\n                        <ns:Type>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorType\"/>\n                        </ns:Type>\n                        <ns:Severity>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorSeverity\"/>\n                        </ns:Severity>\n                        <ns:Code>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/ErrorCodes/DuplicateToken/code\"/>\n                        </ns:Code>\n                        <ns:Message>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/ErrorCodes/DuplicateToken/message\"/>\n                        </ns:Message>\n                        <ns:TransactionData>\n                            <xsl:value-of select=\"string($tokenEvent/payload)\"/>\n                        </ns:TransactionData>\n                    </ns:ExceptionRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
			}
			else
			{
				if(token.STATUS==fail)
				{
					token.STATUS=late;
					
					//Sending the alert to business user.
					Events.Alert.Alert alert=Event.createEvent("xslt://{{/Events/Alert/Alert}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.tibco.com/schemas/GESEventsMonitoring_testing/SharedResources/SchemaDefinitions/Alerts/Schema.xsd\" version=\"1.0\" exclude-result-prefixes=\"xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"token\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns:IndividualAlert>\n                        <xsl:if test=\"$token/PLANT_NUM\">\n                            <ns:Plant_Num>\n                                <xsl:value-of select=\"$token/PLANT_NUM\"/>\n                            </ns:Plant_Num>\n                        </xsl:if>\n                        <xsl:if test=\"$token/SHIPDATE\">\n                            <ns:ShipDate>\n                                <xsl:value-of select=\"$token/SHIPDATE\"/>\n                            </ns:ShipDate>\n                        </xsl:if>\n                        <ns:Entity_Type>\n                            <xsl:value-of select=\"$globalVariables/EXTIDS/ORDER_TOKEN\"/>\n                        </ns:Entity_Type>\n                        <xsl:if test=\"$token/STATUS\">\n                            <ns:Status>\n                                <xsl:value-of select=\"$token/STATUS\"/>\n                            </ns:Status>\n                        </xsl:if>\n                        <ns:Time>\n                            <xsl:value-of select=\"if(string-length($token/TOKEN_GOA_RECIEVETIME)>0)&#xA;then $token/TOKEN_GOA_RECIEVETIME&#xA;else current-dateTime()\"/>\n                        </ns:Time>\n                    </ns:IndividualAlert>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>");
					Event.sendEvent(alert);
				}
				token.TOKEN_GOA_RECIEVETIME=XPath.evalAsString("xpath://<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xpath>\n    <expr>$tokenEvent/payload/xsd2:OrdToken/xsd2:JMSDateTime</expr>\n    <namespaces>\n        <namespace URI=\"http://www.w3.org/1999/XSL/Transform\" pfx=\"xsl\"/>\n        <namespace URI=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" pfx=\"xsd2\"/>\n        <namespace URI=\"http://www.w3.org/2001/XMLSchema\" pfx=\"xsd\"/>\n    </namespaces>\n    <variables>\n        <variable>tokenEvent</variable>\n    </variables>\n</xpath>");
			}
		}
		catch(Exception e)
		{
			String message="Exception caught in processing TokenETMGOAUpdation rule ";
			System.debugOut(message+e);
			Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/ExceptionEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns1=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" version=\"1.0\" exclude-result-prefixes=\"ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"message\"/>\n    <xsl:param name=\"tokenEvent\"/>\n    <xsl:param name=\"e\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns:ExceptionRequest>\n                        <ns:Header>\n                            <ns:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns:ApplicationID>\n                            <ns:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns:ServiceName>\n                            <ns:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/Token\"/>\n                            </ns:ComponentName>\n                            <ns:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns:Hostname>\n                            <ns:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns:Timestamp>\n                            <ns:TransactionType>\n                                <xsl:value-of select=\"$message\"/>\n                            </ns:TransactionType>\n                            <xsl:if test=\"$tokenEvent/payload/ns1:OrdToken/ns1:Plant_Num\">\n                                <ns:BusinessID>\n                                    <xsl:value-of select=\"$tokenEvent/payload/ns1:OrdToken/ns1:Plant_Num\"/>\n                                </ns:BusinessID>\n                            </xsl:if>\n                        </ns:Header>\n                        <ns:Category>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorCategory\"/>\n                        </ns:Category>\n                        <ns:Type>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorType\"/>\n                        </ns:Type>\n                        <ns:Severity>\n                            <xsl:value-of select=\"$globalVariables/CLEparams/DefaultErrorSeverity\"/>\n                        </ns:Severity>\n                        <ns:Code>\n                            <xsl:value-of select=\"$e/@errorType\"/>\n                        </ns:Code>\n                        <xsl:if test=\"$e/@message\">\n                            <ns:Message>\n                                <xsl:value-of select=\"$e/@message\"/>\n                            </ns:Message>\n                        </xsl:if>\n                        <ns:TransactionData>\n                            <xsl:value-of select=\"string($tokenEvent)\"/>\n                        </ns:TransactionData>\n                        <ns:DumpAnalysis>\n                            <xsl:value-of select=\"string($e)\"/>\n                        </ns:DumpAnalysis>\n                    </ns:ExceptionRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
		}
			
		finally
		{
			//End-Logging.
			if(cleFlag)
			{
				Event.sendEvent(Event.createEvent("xslt://{{/Events/Common/LogEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd5\" xmlns:ns1=\"http://www.PepsiCo.com/unique/default/namespace/CommonLE\" xmlns:ns2=\"http://www.pepsico.com/schemas/practice/Schemas/Schema.xsd3\" version=\"1.0\" exclude-result-prefixes=\"ns2 ns1 xsl ns xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"globalVariables\"/>\n    <xsl:param name=\"gesAgentId\"/>\n    <xsl:param name=\"tokenEvent\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <payload>\n                    <ns1:LogRequest>\n                        <ns1:Header>\n                            <ns1:ApplicationID>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_Applicationid\"/>\n                            </ns1:ApplicationID>\n                            <ns1:ServiceName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ServiceName\"/>\n                            </ns1:ServiceName>\n                            <ns1:ComponentName>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_ComponentNames/Token\"/>\n                            </ns1:ComponentName>\n                            <ns1:Hostname>\n                                <xsl:value-of select=\"$gesAgentId\"/>\n                            </ns1:Hostname>\n                            <ns1:Timestamp>\n                                <xsl:value-of select=\"current-dateTime()\"/>\n                            </ns1:Timestamp>\n                            <ns1:TransactionType>\n                                <xsl:value-of select=\"$globalVariables/CLEparams/CLE_TransactionType/OrderToken\"/>\n                            </ns1:TransactionType>\n                            <xsl:if test=\"$tokenEvent/payload/ns2:OrdToken/ns2:Plant_Num\">\n                                <ns1:BusinessID>\n                                    <xsl:value-of select=\"$tokenEvent/payload/ns2:OrdToken/ns2:Plant_Num\"/>\n                                </ns1:BusinessID>\n                            </xsl:if>\n                        </ns1:Header>\n                        <ns1:Messages>\n                            <ns1:Name>\n                                <xsl:value-of select=\"&quot;LOG_MSG&quot;\"/>\n                            </ns1:Name>\n                            <ns1:Value>\n                                <xsl:value-of select=\"concat(&quot;Token updation started for Plant_Num= &quot;,$tokenEvent/payload/ns2:OrdToken/ns2:Plant_Num,&quot; on Ship_Date=&quot;,$tokenEvent/payload/ns2:OrdToken/ns2:Ship_Date)\"/>\n                            </ns1:Value>\n                        </ns1:Messages>\n                        <ns1:Status>\n                            <xsl:value-of select=\"&quot;Start Log&quot;\"/>\n                        </ns1:Status>\n                        <ns1:TransactionBefore>\n                            <xsl:value-of select=\"string($tokenEvent/payload)\"/>\n                        </ns1:TransactionBefore>\n                    </ns1:LogRequest>\n                </payload>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>"));
			}
			
			//Consume\Delete tokenEvent.
			Event.consumeEvent(tokenEvent);
		}
		
	}
}